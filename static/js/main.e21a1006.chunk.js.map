{"version":3,"sources":["components/InputFilled.js","components/Converter.js","components/MainSystemConverter.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["InputFilled","props","className","id","base","name","type","placeholder","onChange","event","result","value","target","toUpperCase","length","maxLength","setNumbers","Array","fill","last","slice","split","converterFromTo","Number","b","String","fromCharCode","charCodeAt","Converter","useState","numbers","maxi","number","fromB","number_in_10_base","parseInt","replace","Math","pow","map","val","toString","n","MainSystemConverter","Navbar","gotoMain","document","getElementById","classList","add","remove","innerText","gotoAll","innerHTML","to","onClick","this","Component","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e21a1006.chunk.js","sourcesContent":["import React from 'react'\n\nfunction InputFilled(props) {\n  const convert = (event) => {\n    let value = event.target.value.toUpperCase();\n    if (value.length > props.maxLength) {\n      return;\n    }\n    let result;\n    if (value === '') {\n      props.setNumbers(Array(19).fill(''))\n    } else {\n      let last = value.slice(-1)\n      if (last === '.') {\n        // console.log('.')\n        if (value.split('.').length === 3) {\n          return;\n        }\n        result = props.converterFromTo(value, props.base)\n        result[props.id] = value;\n        props.setNumbers(result);\n        return;\n      }\n      if ('0' <= last && last <= '9') {\n        if (0 <= Number(last) && Number(last) < props.base) {\n\n        } else {\n          return;\n        }\n      } else {\n        if (props.base <= 10) {\n          return\n        }\n        // console.log(last);\n        let b = String.fromCharCode('A'.charCodeAt(0) + props.base - 10);\n        // console.log('b',b);\n        if ('A' <= last && last < b) {\n\n        } else {\n          return;\n        }\n      }\n\n\n      result = props.converterFromTo(value, props.base)\n      result[props.id] = value;\n      props.setNumbers(result);\n    }\n  }\n\n  return (\n    // <div className=\"d-flex justify-content-center\">\n    <div className=\"col\">\n\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text  w-25 inline-block \" id=\"basic-addon1\">Base : {props.base}</span>\n        <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">{props.name} ({props.base})</span>\n        <input type=\"text\"\n          className=\"form-control\"\n          placeholder=\"\"\n          aria-label=\"Username\" aria-describedby=\"basic-addon1\"\n          onChange={convert}\n          value={props.value}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default InputFilled\n","import React, { useState } from 'react'\nimport InputFilled from './InputFilled'\n\nfunction Converter(props) {\n  const [numbers, setNumbers] = useState(Array(19).fill(''))\n  const maxi = [\"1110100011010100101001010000111111111111111111111111\", \"201220010201202221120020222202200\", \"32203110221100333333333333\", \"13243332330444444444444\", \"104155244231222522543\", \"2341521143245323060\", \"164324512077777777\", \"21803652846228680\", \"4095999999999999\", \"A87125932555953\", \"3234882A8596453\", \"106A681B1511570\", \"5236765A210567\", \"2188155E504969\", \"E8D4A50FFFFFF\", \"708CD67C97DE3\", \"39D373118B3H9\", \"1G3176H1CE9C0\", \"JJJJJJJJJJJJ\"];\n\n  const name = [\n    'Binary',\n    'Ternary',\n    'Quaternary',\n    'Quinary',\n    'Senary',\n    'Septenary',\n    'Octal',\n    'Nonary',\n    'Decimal',\n    'Undecimal',\n    'Duodecimal',\n    'Tridecimal',\n    'Tetradecimal',\n    'Pentadecimal',\n    'Hexadecimal',\n    'Heptadecimal',\n    'Octodecimal',\n    'Enneadecimal',\n    'Vigesimal'\n  ]\n  const converterFromTo = (number, fromB) => {\n    let number_in_10_base = parseInt(number.replace('.', ''), fromB) / Math.pow(fromB, (number.split('.')[1] || '').length)\n    return Array(19).fill(0).map((val, id) => {\n      return Number(number_in_10_base).toString(id + 2).toUpperCase()\n    })\n  }\n\n\n\n  return (\n    <div>\n      <div className=\"container\">\n        {/* <div>\n          {JSON.stringify(numbers)}\n        </div> */}\n        <div className=\"text-center my-5 \">\n          <h1>Super Powerfull Number Converter</h1>\n        </div>\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"input-group mb-3 w-50\">\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Base</span>\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Number Name</span>\n            <span className=\"input-group-text  w-50 inline-block\" id=\"basic-addon1\">Converted Number</span>\n          </div>\n        </div>\n        <div className=\"row row-cols-2\">\n\n          {Array(19).fill(0).map((n, id) => {\n            return <InputFilled\n              converterFromTo={converterFromTo}\n              setNumbers={setNumbers}\n              numbers={numbers}\n              base={id + 2}\n              name={name[id]}\n              key={id}\n              id={id}\n              value={numbers[id]}\n              maxLength={maxi[id].length}\n            />\n          })}\n\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Converter\n","import React, { useState } from 'react'\nimport InputFilled from './InputFilled'\n\nfunction MainSystemConverter(props) {\n  const [numbers, setNumbers] = useState(Array(19).fill(''))\n  const maxi = [\"1110100011010100101001010000111111111111111111111111\", \"201220010201202221120020222202200\", \"32203110221100333333333333\", \"13243332330444444444444\", \"104155244231222522543\", \"2341521143245323060\", \"164324512077777777\", \"21803652846228680\", \"4095999999999999\", \"A87125932555953\", \"3234882A8596453\", \"106A681B1511570\", \"5236765A210567\", \"2188155E504969\", \"E8D4A50FFFFFF\", \"708CD67C97DE3\", \"39D373118B3H9\", \"1G3176H1CE9C0\", \"JJJJJJJJJJJJ\"];\n\n  const name = [\n    'Binary',\n    'Ternary',\n    'Quaternary',\n    'Quinary',\n    'Senary',\n    'Septenary',\n    'Octal',\n    'Nonary',\n    'Decimal',\n    'Undecimal',\n    'Duodecimal',\n    'Tridecimal',\n    'Tetradecimal',\n    'Pentadecimal',\n    'Hexadecimal',\n    'Heptadecimal',\n    'Octodecimal',\n    'Enneadecimal',\n    'Vigesimal'\n  ]\n  const converterFromTo = (number, fromB) => {\n    let number_in_10_base = parseInt(number.replace('.', ''), fromB) / Math.pow(fromB, (number.split('.')[1] || '').length)\n    return Array(19).fill(0).map((val, id) => {\n      return Number(number_in_10_base).toString(id + 2).toUpperCase()\n    })\n  }\n\n\n\n  return (\n    <div>\n      <div className=\"container\">\n        {/* <div>\n          {JSON.stringify(numbers)}\n        </div> */}\n        <div className=\"text-center my-5 \">\n          <h1>Number Converter</h1>\n        </div>\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"input-group mb-3 w-50\">\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Base</span>\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Number Name</span>\n            <span className=\"input-group-text  w-50 inline-block\" id=\"basic-addon1\">Converted Number</span>\n          </div>\n        </div>\n        <div className=\"row row-cols-2\">\n\n          {Array(19).fill(0).map((n, id) => {\n            if (id + 2 === 2 || id + 2 === 10 || id + 2 === 8 || id + 2 === 16)\n              return <InputFilled\n                converterFromTo={converterFromTo}\n                setNumbers={setNumbers}\n                numbers={numbers}\n                base={id + 2}\n                name={name[id]}\n                key={id}\n                id={id}\n                value={numbers[id]}\n                maxLength={maxi[id].length}\n              />\n            else return;\n          })}\n\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MainSystemConverter\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Navbar extends Component {\n  gotoMain = () => {\n    document.getElementById('Main').classList.add('active');\n    document.getElementById('all').classList.remove('active');\n    document.getElementById('title').innerText = 'Number Converter Calculator';\n  }\n\n  gotoAll = () => {\n    document.getElementById('Main').classList.remove('active');\n    document.getElementById('all').classList.add('active');\n    document.getElementById('title').innerHTML = 'Super Powerful Number Converter';\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n          <div className=\"container-fluid\">\n            <Link className=\"navbar-brand\" to=\"/\"\n              onClick={this.gotoMain}\n            >Number Converter</Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                <li className=\"nav-item\" >\n                  <Link className=\"nav-link active\" id='Main' aria-current=\"page\" to=\"/\"\n                    onClick={this.gotoMain}\n                  >Main 4 System</Link>\n                </li>\n                <li className=\"nav-item\" >\n                  <Link className=\"nav-link\" id=\"all\" to=\"/convert-all\"\n                    onClick={this.gotoAll}\n                  >Convert All</Link>\n                </li>\n\n\n              </ul>\n              <div className=\"d-flex\">\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                  <li className=\"nav-item Active\">\n                    <span className=\"nav-link\">Created by Deep Gajjar</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </div>\n    )\n  }\n}\n\nexport default Navbar\n","import './App.css';\nimport Converter from './components/Converter';\nimport MainSystemConverter from './components/MainSystemConverter'\nimport Navbar from './components/Navbar';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\">\n          <MainSystemConverter />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route exact path=\"/convert-all\">\n          <Converter />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}