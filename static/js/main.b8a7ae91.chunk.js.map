{"version":3,"sources":["components/InputFilled.jsx","components/Converter.jsx","components/MainSystemConverter.jsx","components/Navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputFilled","props","className","id","base","name","type","placeholder","onChange","event","result","value","target","toUpperCase","length","maxLength","setNumbers","Array","fill","last","slice","converterFromTo","Number","b","String","fromCharCode","charCodeAt","Converter","useState","numbers","maxi","number","fromB","number_in_10_base","parseInt","replace","Math","pow","split","map","val","toString","n","MainSystemConverter","Navbar","gotoMain","document","getElementById","classList","add","remove","gotoAll","to","onClick","this","Component","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b8a7ae91.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction InputFilled(props) {\r\n  const convert = (event) => {\r\n    let value = event.target.value.toUpperCase();\r\n    if (value.length > props.maxLength) {\r\n      return;\r\n    }\r\n    let result;\r\n    if (value === '') {\r\n      props.setNumbers(Array(19).fill(''))\r\n    } else {\r\n      let last = value.slice(-1)\r\n      if (last === '.') {\r\n        // console.log('.')\r\n        result = props.converterFromTo(value, props.base)\r\n        result[props.id] = value;\r\n        props.setNumbers(result);\r\n        return;\r\n      }\r\n      if ('0' <= last && last <= '9') {\r\n        if (0 <= Number(last) && Number(last) < props.base) {\r\n\r\n        } else {\r\n          return;\r\n        }\r\n      } else {\r\n        if (props.base <= 10) {\r\n          return\r\n        }\r\n        // console.log(last);\r\n        let b = String.fromCharCode('A'.charCodeAt(0) + props.base - 10);\r\n        // console.log('b',b);\r\n        if ('A' <= last && last <= b) {\r\n\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n\r\n\r\n      result = props.converterFromTo(value, props.base)\r\n      props.setNumbers(result);\r\n    }\r\n  }\r\n\r\n  return (\r\n    // <div className=\"d-flex justify-content-center\">\r\n    <div className=\"col\">\r\n\r\n      <div className=\"input-group mb-3\">\r\n        <span className=\"input-group-text  w-25 inline-block \" id=\"basic-addon1\">Base : {props.base}</span>\r\n        <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">{props.name} ({props.base})</span>\r\n        <input type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"\"\r\n          aria-label=\"Username\" aria-describedby=\"basic-addon1\"\r\n          onChange={convert}\r\n          value={props.value}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputFilled\r\n","import React, { useState} from 'react'\r\nimport InputFilled from './InputFilled'\r\n\r\nfunction Converter(props) {\r\n  const [numbers, setNumbers] = useState(Array(19).fill(''))\r\n  const maxi = [\"1110100011010100101001010000111111111111111111111111\",\"201220010201202221120020222202200\",\"32203110221100333333333333\",\"13243332330444444444444\",\"104155244231222522543\",\"2341521143245323060\",\"164324512077777777\",\"21803652846228680\",\"4095999999999999\",\"A87125932555953\",\"3234882A8596453\",\"106A681B1511570\",\"5236765A210567\",\"2188155E504969\",\"E8D4A50FFFFFF\",\"708CD67C97DE3\",\"39D373118B3H9\",\"1G3176H1CE9C0\",\"JJJJJJJJJJJJ\"];\r\n\r\n  const name = [\r\n    'Binary',\r\n    'Ternary',\r\n    'Quaternary',\r\n    'Quinary',\r\n    'Senary',\r\n    'Septenary',\r\n    'Octal',\r\n    'Nonary',\r\n    'Decimal',\r\n    'Undecimal',\r\n    'Duodecimal',\r\n    'Tridecimal',\r\n    'Tetradecimal',\r\n    'Pentadecimal',\r\n    'Hexadecimal',\r\n    'Heptadecimal',\r\n    'Octodecimal',\r\n    'Enneadecimal',\r\n    'Vigesimal'\r\n  ]\r\n  const converterFromTo = (number, fromB) => {\r\n    let number_in_10_base = parseInt(number.replace('.', ''), fromB) / Math.pow(fromB, (number.split('.')[1] || '').length)\r\n    return Array(19).fill(0).map((val,id) => {\r\n      return Number(number_in_10_base).toString(id+2).toUpperCase()\r\n    })\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        {/* <div>\r\n          {JSON.stringify(numbers)}\r\n        </div> */}\r\n        <div className=\"text-center my-5 \">\r\n          <h1>Super Powerfull Number Converter</h1>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <div className=\"input-group mb-3 w-50\">\r\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Base</span>\r\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Number Name</span>\r\n            <span className=\"input-group-text  w-50 inline-block\" id=\"basic-addon1\">Converted Number</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"row row-cols-2\">\r\n\r\n        {Array(19).fill(0).map((n, id) => {\r\n          return <InputFilled\r\n          converterFromTo={converterFromTo}\r\n          setNumbers = {setNumbers}\r\n          numbers = {numbers}\r\n          base={id + 2}\r\n          name={name[id]}\r\n          key={id}\r\n          id={id}\r\n          value={numbers[id]}\r\n          maxLength = {maxi[id].length}\r\n          />\r\n        })}\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Converter\r\n","import React, { useState } from 'react'\r\nimport InputFilled from './InputFilled'\r\n\r\nfunction MainSystemConverter(props) {\r\n  const [numbers, setNumbers] = useState(Array(19).fill(''))\r\n  const maxi = [\"1110100011010100101001010000111111111111111111111111\",\"201220010201202221120020222202200\",\"32203110221100333333333333\",\"13243332330444444444444\",\"104155244231222522543\",\"2341521143245323060\",\"164324512077777777\",\"21803652846228680\",\"4095999999999999\",\"A87125932555953\",\"3234882A8596453\",\"106A681B1511570\",\"5236765A210567\",\"2188155E504969\",\"E8D4A50FFFFFF\",\"708CD67C97DE3\",\"39D373118B3H9\",\"1G3176H1CE9C0\",\"JJJJJJJJJJJJ\"];\r\n\r\n  const name = [\r\n    'Binary',\r\n    'Ternary',\r\n    'Quaternary',\r\n    'Quinary',\r\n    'Senary',\r\n    'Septenary',\r\n    'Octal',\r\n    'Nonary',\r\n    'Decimal',\r\n    'Undecimal',\r\n    'Duodecimal',\r\n    'Tridecimal',\r\n    'Tetradecimal',\r\n    'Pentadecimal',\r\n    'Hexadecimal',\r\n    'Heptadecimal',\r\n    'Octodecimal',\r\n    'Enneadecimal',\r\n    'Vigesimal'\r\n  ]\r\n  const converterFromTo = (number, fromB) => {\r\n    let number_in_10_base = parseInt(number.replace('.', ''), fromB) / Math.pow(fromB, (number.split('.')[1] || '').length)\r\n    return Array(19).fill(0).map((val, id) => {\r\n      return Number(number_in_10_base).toString(id + 2).toUpperCase()\r\n    })\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        {/* <div>\r\n          {JSON.stringify(numbers)}\r\n        </div> */}\r\n        <div className=\"text-center my-5 \">\r\n          <h1>Number Converter</h1>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <div className=\"input-group mb-3 w-50\">\r\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Base</span>\r\n            <span className=\"input-group-text  w-25 inline-block\" id=\"basic-addon1\">Number Name</span>\r\n            <span className=\"input-group-text  w-50 inline-block\" id=\"basic-addon1\">Converted Number</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"row row-cols-2\">\r\n\r\n          {Array(19).fill(0).map((n, id) => {\r\n            if (id + 2 === 2 || id + 2 === 10 || id + 2 === 8 || id + 2 === 16)\r\n              return <InputFilled\r\n                converterFromTo={converterFromTo}\r\n                setNumbers={setNumbers}\r\n                numbers={numbers}\r\n                base={id + 2}\r\n                name={name[id]}\r\n                key={id}\r\n                id={id}\r\n                value={numbers[id]}\r\n                maxLength = {maxi[id].length}\r\n              />\r\n            else return;\r\n          })}\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainSystemConverter\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Navbar extends Component {\r\n  gotoMain=() => {\r\n    document.getElementById('Main').classList.add('active');\r\n    document.getElementById('all').classList.remove('active');\r\n  }\r\n  \r\n  gotoAll=() => {\r\n    document.getElementById('Main').classList.remove('active');\r\n    document.getElementById('all').classList.add('active');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n          <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\"\r\n              onClick={this.gotoMain}\r\n            >Number Converter</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\" >\r\n                  <Link className=\"nav-link active\" id='Main' aria-current=\"page\" to=\"/\"\r\n                    onClick={this.gotoMain}\r\n                  >Main 4 System</Link>\r\n                </li>\r\n                <li className=\"nav-item\" >\r\n                  <Link className=\"nav-link\" id=\"all\" to=\"/convert-all\"\r\n                    onClick={this.gotoAll}\r\n                  >Convert All</Link>\r\n                </li>\r\n\r\n\r\n              </ul>\r\n              <div className=\"d-flex\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                  <li className=\"nav-item Active\">\r\n                    <span className=\"nav-link\">Created by Deep Gajjar</span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar\r\n","import './App.css';\nimport Converter from './components/Converter';\nimport MainSystemConverter from './components/MainSystemConverter'\nimport Navbar from './components/Navbar';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\">\n          <MainSystemConverter />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route exact path=\"/convert-all\">\n          <Converter />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}